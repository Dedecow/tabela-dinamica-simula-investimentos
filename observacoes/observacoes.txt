
PROXIMOS PASSOS::

Utilizar dados remotos (ou simular com JSON): Atualmente, os investimentos sugeridos (investimentosPadrao) são definidos como um array diretamente no arquivo entrega2.js. Para atender a este critério, eles deveriam ser carregados de uma fonte remota (via fetch ou similar) ou de um arquivo JSON externo.

Crie uma pasta data/ na raiz do seu projeto.

crie um arquivo investimentos.json com o conteúdo JSON 

Remover/Comentar carregarInvestimentosPadrao()

Criar async function carregarInvestimentosDoJson() 

Dentro da função inicializarApp(), substitua qualquer chamada a carregarInvestimentosPadrao() por carregarInvestimentosDoJson()

Dentro da função garantirInvestimentosIniciais(), a chamada para carregar os investimentos iniciais aponta para carregarInvestimentosDoJson()?

addEventListener para carregarPadroesBtn --> chama carregarInvestimentosDoJson() ou carregarInvestimentosPadrao()?

Elimine console.log e derivados: O código ainda utiliza console.log para depuração.

Criar as funções exibirErroFormulario(mensagem) e limparErroFormulario()

Atualizar as funções lidarComEnvioDeFormulario e lidarComEnvioDeInvestimento para substituir todas as ocorrências de formErrors.textContent = ... e formErrors.textContent = ''



Link para repositório do Github (preferencial).

Nome do arquivo “ProjetoFinal+Sobrenome”.





ITENS OK:


Criar um simulador interativo.

O tipo de simulador (financeiro/investimentos) está alinhado com as opções sugeridas (E-commerce, Cotador, Home Banking, etc.).

Objetivos Específicos:

HTML interativo (gerado a partir do JS), com manipulação dinâmica do DOM.

Funcionalidade 100% e com a lógica de negócios básica do projeto escolhido (simula o processo de adicionar e listar investimentos).

Deve Ser Entregue:

Projeto HTML + CSS + JS funcional.

Critérios de Avaliação:


Funcionalidade: Simula o fluxo de trabalho de entrada-processamento-saída, e não há erros de cômputo observáveis com a lógica fornecida. 


Interatividade: Captura entradas usando inputs e eventos adequados, com saídas coerentes visualizadas dinamicamente no HTML. 


Escalabilidade: Declara funções com parâmetros, define objetos (Investimento) com propriedades e métodos, e utiliza arrays para agrupar dados de forma dinâmica e eficiente. 


Legibilidade: Nomes de variáveis, funções e objetos são significativos; o código é legível, organizado e possui comentários oportunos. 


obs

Objetivos Específicos:

Uso das ferramentas mais importantes de JS, e bibliotecas externas: Ferramentas importantes do JS são utilizadas, mas não há uso de bibliotecas JavaScript externas no projeto.

Sugestões:

Substituir alert, prompt, confirm por uma biblioteca JS: alert() e prompt() foram substituídos por modais e mensagens no DOM. No entanto, a função 

limparInvestimentos() ainda utiliza confirm(), e a substituição solicitada por uma biblioteca JS não foi implementada para essa funcionalidade. 

Critérios de Avaliação:


Integridade: O JavaScript está em um arquivo .js separado e bem referenciado.  O uso de JSON (

JSON.stringify, JSON.parse) para persistência no localStorage está adequado. Contudo, não há carregamento assíncrono de 

informação estática em formato JSON de uma fonte externa; os dados padrão são definidos diretamente no JavaScript. 
